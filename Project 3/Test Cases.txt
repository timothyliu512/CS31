There were 76 test cases, each worth 1.2 points totaling 95 points altogether. Additionally, your TA might have taken off an additional 5 points for your reporting document.  Each code test case is represented by an assertion that must be true for you to pass that test. To run the test cases:


Remove the main() routine from your innout.cpp file.
Append the following text to the end of your innout.cpp file, and build the resulting program.
For any test case you wish to try, run the program, providing as input the test number.


—---


#include <cassert>
#include <string>
#include <iostream>
using namespace std;


bool    isValidOrderString( string orderstring );
double  cost( string orderstring );
int     howManyCombos( string orderstring, int whichCombo );
int     howManyShakes( string orderstring, string whichFlavor );


void testone(int n)
{
    switch (n)
    {
        case  1:
            assert( !isValidOrderString( "" ) );
            break;
        case  2:
            assert( !isValidOrderString( " " ) );
            break;
        case  3:
            assert( !isValidOrderString("12") );
            break;
        case  4:
            assert( !isValidOrderString("12:") );
            break;
        case  5:
            assert( !isValidOrderString("12:1_") );
            break;
        case  6:
            assert( !isValidOrderString("-12:1") );
            break;
        case  7:
            assert( !isValidOrderString("-12:A") );
            break;
        case  8:
            assert( !isValidOrderString("12:A") );
            break;
        case  9:
            assert( !isValidOrderString("12:C_12:" ) );
            break;
        case 10:
            assert( !isValidOrderString("12_V") );
            break;
        case 11:
            assert( !isValidOrderString("12:S_12_C") );
            break;
        case 12:
            assert( !isValidOrderString( "12:5" ) );
            break;
        case 13:
            assert( !isValidOrderString("0:1") );
            break;
        case 14:
            assert( !isValidOrderString("0:0"));
            break;
        case 15:
            assert( !isValidOrderString("4:0") );
            break;
        case 16:
            assert( !isValidOrderString("10000:1") );
            break;
        case 17:
            assert( !isValidOrderString("40:1_10:2_1:C") );
            break;
        case 18:
            assert( !isValidOrderString("10:S_41:2") );
            break;
        case 19:
            assert( !isValidOrderString("10:S_40:C_10:1"));
            break;
        case 20:
            assert( !isValidOrderString("5:1       ") );
            break;
        case 21:
            assert( !isValidOrderString("     5:1_6:C     ") );
            break;
        case 22:
            assert( !isValidOrderString("1:S_000:000")  );
            break;
        case 23:
            assert( !isValidOrderString("2:V_0004:0012") );
            break;
        case 24:
            assert( !isValidOrderString("4:S_004:003") );
            break;
        case 25:
            assert( std::to_string( cost("") ) == "-1.000000" );
            break;
        case 26:
            assert( std::to_string( cost(" ") ) == "-1.000000" );
            break;
        case 27:
            assert( std::to_string( cost("12:1_12:5_") ) == "-1.000000" );
            break;
        case 28:
            assert( std::to_string( cost("_12:1_12:2") ) == "-1.000000" );
            break;
        case 29:
            assert( std::to_string( cost("12:5") ) == "-1.000000" );
            break;
        case  30:
            assert( std::to_string( cost("0:1") ) == "-1.000000" );
            break;
        case  31:
            assert( std::to_string( cost("0:s") ) == "-1.000000" );
            break;
        case  32:
            assert( std::to_string( cost("1:V_4:0") ) == "-1.000000" );
            break;
        case  33:
            assert( std::to_string( cost("10000:1") ) == "-1.000000" );
            break;
        case  34:
            assert( std::to_string( cost("40:1_10:2_1:C") ) == "-1.000000" );
            break;
        case 35:
            assert( std::to_string( cost("10:V_41:2") ) == "-1.000000" );
            break;
        case  36:
            assert( std::to_string( cost("10:1_40:S_10:1") ) == "-1.000000" );
            break;
        case  37:
            assert( std::to_string( cost("1:1") ) == "9.450000" );
            break;
        case  38:
            assert( std::to_string( cost("1:S") )  == "2.850000" );
            break;
        case 39:
            assert( std::to_string( cost("1:S_1:C") )  == "5.700000" );
            break;
        case 40:
            assert( std::to_string( cost( "1:2" ) ) == "7.950000" );
            break;
        case 41:
            assert( std::to_string( cost( "1:3" ) ) == "7.550000" );
            break;
        case 42:
            assert( std::to_string( cost( "1:1_1:2" ) ) == "17.400000" );
            break;
        case 43:
            assert( std::to_string( cost( "1:2_1:3" ) ) == "15.500000" );
            break;
        case 44:
            assert( std::to_string( cost( "1:1_1:2_1:3" ) ) == "24.950000" );
            break;
        case 45:
            assert( std::to_string( cost( "1:1_1:1_1:1" ) ) == "28.350000" );
            break;
        case 46:
            assert( std::to_string( cost("1:2_1:2_1:2") ) == "23.850000" );
            break;
        case 47:
            assert( std::to_string( cost( "1:3_1:3_1:3" ) ) == "22.650000" );
            break;
        case 48:
            assert( std::to_string( cost( "1:3_1:3_1:3_1:C" ) ) == "25.500000" );
            break;
        case 49:
            assert( howManyCombos( "1:1", 0 ) == -1 );
            break;
        case 50:
            assert( howManyCombos( "1:1", 1 ) == 1 );
            break;
        case 51:
            assert( howManyCombos( "1:2", 2 ) == 1 );
            break;
        case 52:
            assert( howManyCombos( "1:3", 3 ) == 1 );
            break;
        case 53:
            assert( howManyCombos( "1:1", 10000 ) == -1 );
            break;
        case 54:
            assert( howManyCombos( "3:C_1:1_1:2", 1  ) == 1 );
            break;            
        case 55:
            assert( howManyCombos( "4:V_1:1_1:2", 2 ) == 1 );
            break;
        case 56:
            assert( howManyCombos( "5:S_1:1_1:2", 3 ) == 0 );
            break;
        case 57:
            assert( howManyCombos( "1:C_1:2_1:3", 1 ) == 0 );
            break;
        case 58:
            assert( howManyCombos( "2:S_1:2_1:3", 2 ) == 1 );
            break;
        case 59:
            assert( howManyCombos( "3:V_1:2_1:3", 3 ) == 1 );
            break;
        case 60:
            assert( howManyCombos( "1:1_1:2_1:1", 1 ) == 2 );
            break;
        case  61:
            assert( howManyCombos( "1:2_1:2_1:3", 2 ) == 2 );
            break;
        case 62:
            assert( howManyCombos( "1:1_1:2_1:3", 3 ) == 1 );
            break;
        case 63:
            assert( howManyCombos( "1:1_1:1_1:1", 1 )  == 3 );
            break;
        case  64:
            assert( howManyCombos( "1:1_1:1_1:1", 2 ) == 0 );
            break;
        case  65:
            assert( howManyCombos( "1:1_1:1_", 2 ) == -1 );
            break;
        case  66:
            assert( howManyCombos( "1_1:1_1:1", -10 ) == -1);
            break;
        case  67:
            assert( howManyShakes( "1:1_1:1_1:1", "Banana" ) == -1 );
            break;
        case 68:
            assert( howManyShakes( "1:", "Chocolate" ) == -1 );
            break;
        case  69:
            assert( howManyShakes( "1:1_2:2", "Chocolate" ) == 0 );
            break;
        case 70:
            assert( howManyShakes("1:1_2:2_1:C_1:V", "Strawberry" ) == 0 );
            break;
        case  71:
            assert( howManyShakes( "1:1_2:2_1:C_1:C_1:V", "Chocolate" ) == 2 );
            break;
        case  72:
            assert( howManyShakes( "1:1_2:S_1:C_1:C_1:V", "Strawberry" ) == 2 );
            break;
        case 73:
            assert( howManyShakes( "1:1_2:3", "Strawberry" ) == 0 );
            break;
        case 74:
            assert( howManyShakes( "1:1_2:3", "Chocolate" ) == 0 );
            break;
        case 75:
            assert( howManyShakes( "1:1_10:S_2:3", "Strawberry" ) == 10 );
            break;
        case 76:
            assert( howManyShakes("1:1_5:V_10:S_2:3_5:V", "Vanilla" ) == 10 );
            break;
        default:
            cout << "Bad argument" << endl;
            break;
    }
}


int main()
{
        cout << "Enter test number: ";
        int n;
        cin >> n;
        testone(n);
        cout << "Passed!" << endl;
        return( 0 );
}